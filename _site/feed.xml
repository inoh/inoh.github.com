<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ino-h.com</title>
    <description>自分が今興味のあることを備忘録的にまとめたサイトです。 内容でのフォードバック大歓迎なのでメッセージください！
</description>
    <link>ino-h.com/</link>
    <atom:link href="ino-h.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 15 Feb 2017 05:45:02 +0900</pubDate>
    <lastBuildDate>Wed, 15 Feb 2017 05:45:02 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>ラズパイ３上のPythonでMQTTの通信をやってみる</title>
        <description>&lt;h2 id=&quot;mqttとは&quot;&gt;MQTTとは&lt;/h2&gt;

&lt;p&gt;まずはなんの略か？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MQTT（Message Queue Telemetry Transport）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;直訳すると「メッセージキューを使って遠隔測定法で輸送する」という感じ。&lt;br /&gt;
メッセージキューなのでよくある Pub/Sub のモデルを採用した通信方法です。&lt;/p&gt;

&lt;h2 id=&quot;basicpubsubpy&quot;&gt;basicPubSub.py&lt;/h2&gt;

&lt;p&gt;最初のデバイス登録で使用した &lt;code class=&quot;highlighter-rouge&quot;&gt;setup.sh&lt;/code&gt; を確認してみます。&lt;br /&gt;
その中で下記のサンプルプログラムを動かしていることが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/aws/aws-iot-device-sdk-python/blob/master/samples/basicPubSub/basicPubSub.py&quot;&gt;サンプルプログラム&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;このサンプルプログラムを読み解くといろいろと見えてきました。&lt;/p&gt;

&lt;h2 id=&quot;setupshの引数&quot;&gt;setup.shの引数&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;–endpont xxxxx.iot.ap-northeast-1.amazonaws.com
    &lt;ul&gt;
      &lt;li&gt;Your AWS IoT custom endpoint&lt;/li&gt;
      &lt;li&gt;変数：host&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;–rootCA root-CA.crt
    &lt;ul&gt;
      &lt;li&gt;Root CA file path&lt;/li&gt;
      &lt;li&gt;ルート認証局の証明書&lt;/li&gt;
      &lt;li&gt;変数：rootCAPath&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;–cert xxxxx.cert.pem
    &lt;ul&gt;
      &lt;li&gt;Certificate file path&lt;/li&gt;
      &lt;li&gt;X.509証明書。複数のサーバ証明書を1ファイルに連結させることができる&lt;/li&gt;
      &lt;li&gt;変数：certificatePath&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;–key xxxxx.private.key
    &lt;ul&gt;
      &lt;li&gt;Private key file path
  AWSのアクセスプライベートキー&lt;/li&gt;
      &lt;li&gt;変数：privateKeyPath&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用ライブラリ&quot;&gt;使用ライブラリ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient&lt;/li&gt;
  &lt;li&gt;import sys&lt;/li&gt;
  &lt;li&gt;import logging&lt;/li&gt;
  &lt;li&gt;import time&lt;/li&gt;
  &lt;li&gt;import getopt&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;init-awsiotmqttclient&quot;&gt;Init AWSIoTMQTTClient&lt;/h2&gt;

&lt;p&gt;サンプルプログラムではPythonの &lt;code class=&quot;highlighter-rouge&quot;&gt;AWSIoTMQTTClient&lt;/code&gt; を使用してAWSとの接続確認を行います。&lt;/p&gt;

&lt;h4 id=&quot;mqtt&quot;&gt;MQTT&lt;/h4&gt;

&lt;p&gt;MQTTのみで通信を行う場合の設定になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myAWSIoTMQTTClient = AWSIoTMQTTClient(&quot;basicPubSub&quot;)
myAWSIoTMQTTClient.configureEndpoint(host, 8883)
myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;mqttwebsocket&quot;&gt;MQTT+WebSocket&lt;/h4&gt;

&lt;p&gt;MQTTとWebsocketで通信を行う場合の設定になります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Init AWSIoTMQTTClient
myAWSIoTMQTTClient = AWSIoTMQTTClient(&quot;basicPubSub&quot;, useWebsocket=True)
myAWSIoTMQTTClient.configureEndpoint(host, 443)
myAWSIoTMQTTClient.configureCredentials(rootCAPath)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;awsiotmqttclient-connection-configuration&quot;&gt;AWSIoTMQTTClient connection configuration&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)
# Infinite offline Publish queueing
myAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)
# Draining: 2 Hz
myAWSIoTMQTTClient.configureDrainingFrequency(2)
# 10 sec
myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)
# 5 sec
myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;connect-and-subscribe&quot;&gt;Connect and subscribe&lt;/h2&gt;

&lt;p&gt;AWSに接続を行い &lt;code class=&quot;highlighter-rouge&quot;&gt;sdk/test/Python&lt;/code&gt; というトピックをsubscribeします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def customCallback(client, userdata, message):
	print(&quot;Received a new message: &quot;)
	print(message.payload)
	print(&quot;from topic: &quot;)
	print(message.topic)
	print(&quot;--------------\n\n&quot;)

myAWSIoTMQTTClient.connect()
myAWSIoTMQTTClient.subscribe(&quot;sdk/test/Python&quot;, 1, customCallback)
time.sleep(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;publish&quot;&gt;Publish&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sdk/test/Python&lt;/code&gt; に対して１秒間隔でpublishします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;loopCount = 0
while True:
	myAWSIoTMQTTClient.publish(&quot;sdk/test/Python&quot;, &quot;New Message &quot; + str(loopCount), 1)
	loopCount += 1
	time.sleep(1)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 15 Feb 2017 00:00:00 +0900</pubDate>
        <link>ino-h.com/blog/2017/02/15/mqtt.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2017/02/15/mqtt.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>AWS IoT にデバイスを登録してテストする</title>
        <description>&lt;h2 id=&quot;aws-iot-に接続&quot;&gt;AWS IoT に接続&lt;/h2&gt;

&lt;p&gt;Pythonを使って AWS IoT に接続してみます。&lt;br /&gt;
リファレンスは下記のリンクになります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ap-northeast-1.console.aws.amazon.com/iotv2/home?region=ap-northeast-1#/connectdevice/&quot;&gt;» リファレンス&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;接続するため、以下の流れで作業を行います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デバイスの登録&lt;/li&gt;
  &lt;li&gt;SDKをダウンロード&lt;/li&gt;
  &lt;li&gt;デバイスの設定とテスト&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;デバイス登録&quot;&gt;デバイス登録&lt;/h4&gt;

&lt;p&gt;まずはAWS IoT にデバイスを登録します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-04-connect-step1.png&quot; alt=&quot;デバイス登録の画面&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;sdkをダウンロード&quot;&gt;SDKをダウンロード&lt;/h4&gt;

&lt;p&gt;PythonのSDKダウンロード確認画面が表示されます。&lt;br /&gt;
その他には先ほど登録したデバイス名とポリシーが表示されています。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-04-connect-step2.png&quot; alt=&quot;SDKをダウンロード&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ダウンロードしたファイルの中身を確認するとこのファイルが入っています。&lt;br /&gt;
SDKといっても接続用のシェルと証明書が入っているだけみたいです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;start.sh&lt;/li&gt;
  &lt;li&gt;TemperatureSensor.cert.pem&lt;/li&gt;
  &lt;li&gt;TemperatureSensor.private.key&lt;/li&gt;
  &lt;li&gt;TemperatureSensor.public.key&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;デバイスの設定とテスト&quot;&gt;デバイスの設定とテスト&lt;/h4&gt;

&lt;p&gt;最後にダウンロードしたSDKの使用手順が表示れます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-04-connect-step3.png&quot; alt=&quot;デバイスの設定とテスト&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接続したデバイスにSDKを入れ、手順に従い実行します。&lt;br /&gt;
単純にラズパイ３上で実行するとこんなエラーが発生しました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: could not create '/usr/local/lib/python2.7/dist-packages/AWSIoTPythonSDK': Permission denied
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;権限が足りないようなので &lt;code class=&quot;highlighter-rouge&quot;&gt;./start.sh&lt;/code&gt; で実行していたところを &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./start.sh&lt;/code&gt; に変えてもう１回実行。&lt;br /&gt;
そしたらこんなエラーに変わりました。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ImportError: No module named AWSIoTPythonSDK.MQTTLib
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;何かモジュールが足りてないようですね。。。&lt;br /&gt;
これを入れてみます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pypi.python.org/pypi/AWSIoTPythonSDK/1.0.0&quot;&gt;» 追加するモジュール&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;下記のコマンド手順で不足しているモジュールをインストールします。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; wget https://pypi.python.org/packages/b8/41/ec9d0786b4ae9f6d205a68cf96ade89414337ebaabb88740f02477d840fa/AWSIoTPythonSDK-1.0.0.tar.gz
&amp;gt; tar xfvz AWSIoTPythonSDK-1.0.0.tar.gz
&amp;gt; cd AWSIoTPythonSDK-1.0.0
&amp;gt; chmod +x setup.py
&amp;gt; sudo python ./setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;これでもう一回 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo ./start.sh&lt;/code&gt; を実行します。&lt;br /&gt;
次にブラウザに戻って確認するとなにやらログが流れているのが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-04-connect-send-message.png&quot; alt=&quot;登録確認&quot; /&gt;&lt;/p&gt;

&lt;p&gt;そして &lt;code class=&quot;highlighter-rouge&quot;&gt;Send message&lt;/code&gt; ボタンでメッセージを送信し、最後にコンソールを確認するとブラウザで入力した内容が表示されます。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ew Message 104
from topic:
sdk/test/Python
--------------


Received a new message:
test
from topic:
sdk/test/Python
--------------


2017-02-03 21:30:39,547 - AWSIoTPythonSDK.core.protocol.mqttCore - DEBUG - Try to put a publish request 107 in the TCP stack.
2017-02-03 21:30:39,548 - AWSIoTPythonSDK.core.protocol.mqttCore - DEBUG - Publish request 107 succeeded.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;デバイスの登録に関しては画面の指示に従いそのまま入力するばほぼ完了できます。&lt;br /&gt;
この登録が完了すると次のチュートリアルが表示されるのでこのあたりを次はやってみようかなと思います。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-02-04-connect-next.png&quot; alt=&quot;次のチュートリアル&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Feb 2017 00:00:00 +0900</pubDate>
        <link>ino-h.com/blog/2017/02/04/aws-iot-post.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2017/02/04/aws-iot-post.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>AWS IoT チュートリアル</title>
        <description>&lt;h2 id=&quot;チュートリアルを読んでみる&quot;&gt;チュートリアルを読んでみる&lt;/h2&gt;

&lt;p&gt;下記のチュートリアルの内容を読んでみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ap-northeast-1.console.aws.amazon.com/iotv2/home?region=ap-northeast-1#/tutorial-intro&quot;&gt;» チュートリアル　&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;チュートリアルを見るためには、AWSアカウントを取得して、ログインをする必要があります。&lt;/p&gt;

&lt;h4 id=&quot;device-gateway&quot;&gt;Device Gateway&lt;/h4&gt;

&lt;p&gt;AWS IoT Device Gateway は、デバイスが AWS IoT と安全かつ効率的に通信できるようにします。&lt;br /&gt;
異なるプロトコルを使用していても、Device Gateway経由で相互に通信ができます。&lt;br /&gt;
Device Gateway に接続された制御ユニットから、コマンドを発行することができ、デバイスはコマンドを取得することができます。&lt;br /&gt;
よくあるPub/Subの構成になります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;対応プロトコル&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;プロトコル&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;認証方法&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Port&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MQTT&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client Certificate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8883&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client Certificate&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;8443&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;HTTP&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SigV4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;443&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;MQTT + WebSocket&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;SigV4&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;443&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;ルールエンジン&quot;&gt;ルールエンジン&lt;/h4&gt;

&lt;p&gt;ルールエンジンは、AWS IoTに公開された受信メッセージを評価し、定義したルールに基づいて別のものに変換して配信します。&lt;br /&gt;
例えば下記のようなルールになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;コマンドが「B」の場合、ルールはメッセージを「G」に変換し、「G」を電球に中継する
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;詳しいルールの設定方法は、公式リファレンスを見てください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/iot/latest/developerguide/iot-rules.html&quot;&gt;» ルールの設定方法&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;ルールエンジンによるデータ処理&quot;&gt;ルールエンジンによるデータ処理&lt;/h4&gt;

&lt;p&gt;ルールエンジンは、AWS LambdaやDynamoDBテーブルなどのエンドポイントにメッセージをルーティングすることもできます。&lt;/p&gt;

&lt;p&gt;使用できるサービスは下記のリンクを参考にしてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.aws.amazon.com/iot/latest/developerguide/iot-rule-actions.html&quot;&gt;» 使用できるサービス一覧&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;デバイスシャドウ&quot;&gt;デバイスシャドウ&lt;/h4&gt;

&lt;p&gt;デバイスシャドウは、デバイスの電源が落ちている等で通信ができないとき、未来の状態を持続させることができます。&lt;br /&gt;
AWS IoTを使用すると、接続されたものとやりとりすると、デバイスに直接通信するのではなく、REST APIを使用してデバイスシャドウの状態を読み取ります。&lt;/p&gt;

&lt;h2 id=&quot;メニュー&quot;&gt;メニュー&lt;/h2&gt;

&lt;p&gt;実際にAWS IoTのメニュー構成を確認してみます。&lt;br /&gt;
このあたりは今後、チュートリアルの内容と照らし合わせながら少しずつ紐といて行こうと思います。&lt;/p&gt;

&lt;h4 id=&quot;イメージ&quot;&gt;イメージ&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-01-28-dashboard.png&quot; alt=&quot;dashboard&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;構成&quot;&gt;構成&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Dashboard
    &lt;ul&gt;
      &lt;li&gt;Successful connections&lt;/li&gt;
      &lt;li&gt;Messages&lt;/li&gt;
      &lt;li&gt;Messages published&lt;/li&gt;
      &lt;li&gt;Rules executed&lt;/li&gt;
      &lt;li&gt;Shadow updates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Connect
    &lt;ul&gt;
      &lt;li&gt;Configuring a device&lt;/li&gt;
      &lt;li&gt;AWS IoT Button&lt;/li&gt;
      &lt;li&gt;AWS IoT Starter Kit&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Registry
    &lt;ul&gt;
      &lt;li&gt;Things&lt;/li&gt;
      &lt;li&gt;Types&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Security
    &lt;ul&gt;
      &lt;li&gt;Certificates&lt;/li&gt;
      &lt;li&gt;Policies&lt;/li&gt;
      &lt;li&gt;CAs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rules&lt;/li&gt;
  &lt;li&gt;Test&lt;/li&gt;
  &lt;li&gt;Settings&lt;/li&gt;
  &lt;li&gt;Learn&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;AWS IoTを使うことによって多数あるデバイスを一斉に制御したり、デバイスが一時的に使用できない場合でも、スムーズに同期することが容易にできます。&lt;br /&gt;
あとはルールの設定により、デバイスからの通信を受けて、様々なAWSのサービスへつなげれることによっていろいろなことが実現できそうです。&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Feb 2017 00:00:00 +0900</pubDate>
        <link>ino-h.com/blog/2017/02/03/aws-iot.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2017/02/03/aws-iot.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>Raspberry Pi3 でLチカをやってみた</title>
        <description>&lt;p&gt;イベントの景品でDushButtonをいただいたので何かIoTらしいことができないかと思っていました。&lt;br /&gt;
DushButtonだけでは何もできないのでとりあえずAmazonでラズパイ３を購入。&lt;br /&gt;
初めてハード制御ということでLチカをやってみました。&lt;/p&gt;

&lt;h2 id=&quot;今回やらないこと&quot;&gt;今回やらないこと&lt;/h2&gt;

&lt;p&gt;最初の初期セットアップになる下記は今回やりません。&lt;br /&gt;
なので終わっていることが前提になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OSのインストール&lt;/li&gt;
  &lt;li&gt;ネットワークの設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ラズパイのピン種類&quot;&gt;ラズパイのピン種類&lt;/h2&gt;

&lt;h4 id=&quot;配線仕様&quot;&gt;配線仕様&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://www.raspberrypi.org/documentation/hardware/raspberrypi/schematics/RPI-3B-V1_2-SCHEMATIC-REDUCED.pdf&quot;&gt;公式の配線図&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;詳細&quot;&gt;詳細&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;+5V / +3.3V
    &lt;ul&gt;
      &lt;li&gt;電源&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIO
    &lt;ul&gt;
      &lt;li&gt;General Purpose Input/Output（汎用入出力）の略&lt;/li&gt;
      &lt;li&gt;電気回路の入力、出力を制御する&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GND
    &lt;ul&gt;
      &lt;li&gt;いわゆるアース。電源を最後に逃すところ&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;配線&quot;&gt;配線&lt;/h4&gt;

&lt;p&gt;配線は電源から始まって抵抗とLEDを通してGPIOにつなぎます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;+3.3V -&amp;gt; 220Ω -&amp;gt; LED -&amp;gt; GPIO2&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;コマンド&quot;&gt;コマンド&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;GPIOを制御するファイルの格納フォルダ
    &lt;ul&gt;
      &lt;li&gt;/sys/class/gpio/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIOの2ピンを有効
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 2 &amp;gt; /sys/class/gpio/export&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIOの2ピンを出力ピンとして設定
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo out &amp;gt; /sys/class/gpio/gpio2/direction&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIOの2ピンを点灯
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 1 &amp;gt; /sys/class/gpio/gpio2/value&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIOの2ピンを消灯
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 0 &amp;gt; /sys/class/gpio/gpio2/value&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;GPIOの2ピンを無効
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;echo 2 &amp;gt; /sys/class/gpio/unexport&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 18 Jan 2017 00:00:00 +0900</pubDate>
        <link>ino-h.com/blog/2017/01/18/l-chika.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2017/01/18/l-chika.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>GEMで独自コマンドの作り方</title>
        <description>&lt;p&gt;GEMを作成する際に独自のコマンドを作る際にはまったことの備忘録です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GEMの空プロジェクト作成&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slideparts&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slideparts&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;binフォルダ作成&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;slide&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;git管理&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;git&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'first commit'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;TODOを修正&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;vi&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;slideparts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gemspec&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# spec.summaryとspec.descriptionを修正する&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;GEM作成&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;build&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rake&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;動かしてみる&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;slide&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;なぜ今回こんなブログを書いたかというと最初ネットたどりながらテスト的にGEMのコマンドを試そうとしていました。&lt;br /&gt;
ネットで見るとrubygemsに登録することを前提に書かれていることが多いためgitの登録に触れずに解説してありました。&lt;br /&gt;
そのためgit登録をしないとコマンドが作成されないことにはまってしましました。&lt;br /&gt;
通常はまることはないと思いますがGEMコマンドにはgit必須ということで備忘録です。&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Mar 2015 05:24:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/03/12/create-gem-command.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/03/12/create-gem-command.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>ShortSlide刷新計画</title>
        <description>&lt;p&gt;２年近く前から&lt;a href=&quot;https://github.com/inoh/shortslide&quot;&gt;ShortSlide&lt;/a&gt;というサービスを作成していました。&lt;br /&gt;
ShortSlideの目的は&lt;strong&gt;「手軽に日記感覚でスライド作成が行える」&lt;/strong&gt;としていました。&lt;/p&gt;

&lt;p&gt;MARKDOWNを使うことにより手軽に説明資料が作成できましたが、その代償として画像の挿入や動きをつけることが容易にできず見た目の悪さや画像の準備で余計な時間を要するようになりました。&lt;br /&gt;
画像の挿入や動きをつけることはMARKDOWNでは難しく結果としてWebでのGUIに頼ってしまいスタート時点での目的からどんどんずれていってしまいました。&lt;/p&gt;

&lt;p&gt;作り始めた当初は手軽さを優先しており&lt;a href=&quot;https://github.com/shower/shower&quot;&gt;Shower&lt;/a&gt;というシンプルなテンプレートを採用していました。&lt;br /&gt;
あれから約２年、目的もずれてきたので一度アプリをリセットすることにしました。&lt;/p&gt;

&lt;p&gt;新しいスライド作成候補は下記のように考えています。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;テンプレート&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Reveal.js&lt;br /&gt;
シンプルな文法だが機能が豊富なので採用しました。&lt;br /&gt;
Impress.jsだと人気もあり良さそうかと思いましたが使う人を選びそうあので不採用にしました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;LL言語&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Haml&lt;br /&gt;
最終的にWebComponentsを混ぜたかったので融通が効きやすくHTML5の新しい要素にも対応できるので採用しました。&lt;br /&gt;
本当はMARKDOWNだとみんなが知ってるのでよかったのですが少し変わった要素を使うと結局HTMLになってしますので不採用にしました。&lt;br /&gt;
でもまだ悩み中…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;サーバ&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Grape&lt;br /&gt;
サーバはREST APIを返すだけに限定する。&lt;br /&gt;
状況によってrailsの主要機能をそぎ落としてActiveRecordのみで使用するかも。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;その他の野望&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebComponetsを使用しスライドを部品化&lt;/li&gt;
  &lt;li&gt;作成はテキストのみで管理、作成を行いたいがプレゼンはAngularJSを使用しシングルページで作成したい&lt;/li&gt;
  &lt;li&gt;スライドの保存はAWSのMongoDB使う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;今後参考にするかも&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/hibara/items/78454f6c70c55e7aa612#3-17&quot;&gt;MARKDOWN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://yuumi3.hatenablog.com/entry/2015/01/30/150451&quot;&gt;Grape&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;さいご&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;２年が経つとShortSlideの問題点が出てきてプロダクトの限界も見てきました。&lt;br /&gt;
世の中の技術も大きく変わってきたので次期のプロダクトとしてどんどん新しいことを取り込み作成したいと思います。&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Mar 2015 12:52:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/03/10/slide-template.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/03/10/slide-template.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>パッケージ管理ソフトを調べてみた</title>
        <description>&lt;h1 id=&quot;パッケージ管理ソフト&quot;&gt;&lt;strong&gt;パッケージ管理ソフト&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;最近では新しい開発環境や技術検証を行う中でいろいろなパッケージ管理ソフトがでてきました。&lt;br /&gt;
ネットをコピペしてやるのはよいけどいろいろな管理ソフトがあって管理が煩雑になってきたので調べてみました。&lt;/p&gt;

&lt;h1 id=&quot;os系&quot;&gt;&lt;strong&gt;OS系&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;この辺りは新しいものではないけど私がよく使う物をあげてみました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux
    &lt;ul&gt;
      &lt;li&gt;RPM&lt;br /&gt;
RedHat用のパッケージ管理システム&lt;/li&gt;
      &lt;li&gt;Yum&lt;br /&gt;
RPMを管理するためのシステム&lt;/li&gt;
      &lt;li&gt;APT&lt;br /&gt;
Debian用のパッケージ管理システム&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mac
    &lt;ul&gt;
      &lt;li&gt;dmg&lt;br /&gt;
管理システムではないけど仮想ディスクイメージで複数のファイルがまとめれる&lt;/li&gt;
      &lt;li&gt;Homebrew&lt;br /&gt;
OS X用のパッケージ管理システム&lt;br /&gt;
調べて初めて知ったけどgitとRubyでできているらしい&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Windows
    &lt;ul&gt;
      &lt;li&gt;Windowsインストーラー&lt;br /&gt;
Windows標準のプログラムと機能を管理&lt;/li&gt;
      &lt;li&gt;Chocolatey&lt;br /&gt;
標準では入ってないけどコマンドベースでインストール管理ができる&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;言語系&quot;&gt;&lt;strong&gt;言語系&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;最近増えだしたのが言語系パッケージ管理システムです。&lt;br /&gt;
新しい言語はだいたい管理ソフトもセットで実装されてますね。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ruby
    &lt;ul&gt;
      &lt;li&gt;rubygems&lt;br /&gt;
Ruby標準パッケージ管理システム&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;javascript(Node.js)
    &lt;ul&gt;
      &lt;li&gt;npm&lt;br /&gt;
Node.js標準パッケージ管理システム&lt;/li&gt;
      &lt;li&gt;Bower&lt;br /&gt;
javascript用のパッケージ管理システム&lt;br /&gt;
npmでインストール&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Python
    &lt;ul&gt;
      &lt;li&gt;pip&lt;br /&gt;
Python標準パッケージ管理システム&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;その他&quot;&gt;&lt;strong&gt;その他&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;GitHub&lt;br /&gt;
ある意味最近の王道と言える管理システムですね&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;参考&quot;&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0&quot;&gt;http://ja.wikipedia.org/wiki/パッケージ管理ソフト&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 22 Feb 2015 18:45:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/02/22/package.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/02/22/package.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>HTMLをカプセル化する</title>
        <description>&lt;h1 id=&quot;shadowdom&quot;&gt;&lt;strong&gt;ShadowDOM&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ShadowDOMはstylesheetをカプセル化する仕組みです。&lt;br /&gt;
ShadowDOMを使用する場合は下記のようにjavascriptでcreateShadowRoot()を使用します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contents&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'div#contents'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createShadowRoot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;style&amp;gt;div{color: red;}&amp;lt;/style&amp;gt;&amp;lt;div&amp;gt;Hello!&amp;lt;/div&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;実行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;contents&quot;&gt;&lt;/div&gt;
&lt;script&gt;
var root = document.querySelector('div#contents').createShadowRoot();
root.innerHTML = &quot;&lt;style&gt;div{color: red;}&lt;/style&gt;&lt;div&gt;Hello!&lt;/div&gt;&quot;;
&lt;/script&gt;

&lt;p&gt;div要素は他でも使用していますが赤くなるのはHello!のみです。&lt;br /&gt;
ShadowDOMを使用すれば外部要因を気にせず部品の提供ができます。&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/ja/tutorials/webcomponents/shadowdom/&quot;&gt;http://www.html5rocks.com/ja/tutorials/webcomponents/shadowdom/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Feb 2015 23:01:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/02/19/startup-shadow-dom.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/02/19/startup-shadow-dom.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>標準HTMLテンプレートの使い方</title>
        <description>&lt;script src=&quot;/js/underscore-min.js&quot;&gt;&lt;/script&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;/template/2015-02-19-sample.js&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;template&quot;&gt;&lt;strong&gt;Template&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;Templateはjavascriptから簡単にHTMLを作る仕組みです。&lt;br /&gt;
有名どころではunderscore.jsのtemplateに近いところがあります。&lt;br /&gt;
目新しい機能ではないですがTemplate使用有無と比較して気がついた点があったのでそのあたりを紹介します。&lt;/p&gt;

&lt;h1 id=&quot;まずはtemplateを使ってみる&quot;&gt;&lt;strong&gt;まずはTemplateを使ってみる&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;ボタンをクリックするとhelloと表示するサンプルです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;say hello!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#message'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;importNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;結果&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;message&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;button onclick=&quot;message()&quot;&gt;click me!&lt;/button&gt;&lt;/p&gt;
&lt;template&gt;
  &lt;div&gt;say hello!&lt;/div&gt;
  &lt;script&gt;alert(&quot;hello&quot;);&lt;/script&gt;
&lt;/template&gt;

&lt;p&gt;特に問題なく動きます。&lt;/p&gt;

&lt;h1 id=&quot;次にtemplateなしで実現する&quot;&gt;&lt;strong&gt;次にTemplateなしで実現する&lt;/strong&gt;&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;HTML&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vanilla&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vanilla()&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello-template&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;say&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;amp;gt&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;javascript&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vanilla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#hello-template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;amp;lt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;amp;gt;/g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'#vanilla'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;結果&lt;/li&gt;
&lt;/ul&gt;

&lt;div id=&quot;vanilla&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;button onclick=&quot;vanilla()&quot;&gt;click me!&lt;/button&gt;&lt;script id=&quot;hello-template&quot; type=&quot;text/template&quot;&gt;&amp;lt;div&amp;gt;say hello!&amp;lt;/div&amp;gt;&lt;script&gt;alert(&quot;hello&quot;)&lt;/script&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;say hello!の文字は表示されますがalertは実行されませんでした。&lt;br /&gt;
Templateの場合は取得結果がDOMとして返されます。&lt;br /&gt;
それに対してscriptタグを使用してテンプレート化した場合は取得結果がテキスト情報でしかないためDOMに変換する必要が有ります。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Template要素を使う意義&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テキストからDOMを生成せずにjavascriptを含めてテンプレート化できる&lt;/li&gt;
  &lt;li&gt;scriptタグを使い回していないためかっこをエスケープする必要がない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Templateを使うことでjavascriptを含めてテンプレート化できるのは大きく感じました。&lt;br /&gt;
従来の方法だとHTMLを流し込んだ後に必要に応じてイベントの登録を行っていました。&lt;br /&gt;
javascriptを含めることでイベント登録もあわせてできます。&lt;br /&gt;
使い手の不要な意識が減ることはよいですよね！&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/ja/tutorials/webcomponents/template/&quot;&gt;http://www.html5rocks.com/ja/tutorials/webcomponents/template/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 19 Feb 2015 05:45:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/02/19/startup-template.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/02/19/startup-template.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
      <item>
        <title>HTML Importsで楽をする方法</title>
        <description>&lt;h1 id=&quot;html-imports&quot;&gt;&lt;strong&gt;HTML Imports&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;HTML ImportsはHTML,javascript,CSSをまとめてテンプート化する仕組みです。&lt;br /&gt;
今までもbootstrapのようにjavascriptやCSSを外出ししjavascriptでHTMLを操作することで実現はできていました。&lt;br /&gt;
ただ一式を制御するために決まった形を毎回コピーペーストするのが一般的だと思います。&lt;br /&gt;
HTML Importsを使用するとjavascriptやCSSを個別定義することなく下記のようにlinkひとつで定義できます。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html-imports.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;bootstrapをテンプレート化&quot;&gt;&lt;strong&gt;Bootstrapをテンプレート化&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;HTML Importsを使用してBootstrapを簡略化しています。&lt;br /&gt;
テンプレート部分を見ると大変そうに見えますが実際の実装は少ないことがわかります。&lt;br /&gt;
これらの簡略化をサーバ側の処理を通さずにできることがすごいことだと思います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;テンプレート&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://getbootstrap.com/dist/css/bootstrap.min.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding-top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;50px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;.starter-template&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;40px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;
&amp;lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;![endif]--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.2/jquery.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://getbootstrap.com/dist/js/bootstrap.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;nav&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar navbar-inverse navbar-fixed-top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-toggle collapsed&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-toggle=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;collapse&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-target=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#navbar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-expanded=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;aria-controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sr-only&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Toggle navigation&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon-bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon-bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon-bar&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar-brand&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Project name&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;navbar&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;collapse navbar-collapse&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;nav navbar-nav&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Home&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#contact&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!--/.nav-collapse --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/nav&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;HTMLElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createdCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'link[rel=&quot;import&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'template'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;registerElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'x-bootstrap-header'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;実装&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/js/webcomponents.min.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;import&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/template/2015-02-11-bootstrap.html&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;x-bootstrap-header&amp;gt;&amp;lt;/x-bootstrap-header&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;starter-template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Header&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lead&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Contents&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;実行結果&lt;/li&gt;
&lt;/ul&gt;

&lt;iframe src=&quot;/template/2015-02-11-bootstrap-view.html&quot; style=&quot;width: 100%; height: 300px;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;&lt;strong&gt;まとめ&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;通常HTMLをテンプレート化するためにはサーバで行うかjavascriptでがりがりDOMを作り込んでやるのが一般的でした。&lt;br /&gt;
HTML Importsを使うことでサーバを通さずにHTML,javascript,CSSを一式テンプレート化するこができ、決まった形式を使い回すのにもとても便利に感じました。&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;&lt;strong&gt;参考&lt;/strong&gt;&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;HTML Imports
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/ja/tutorials/webcomponents/imports/&quot;&gt;http://www.html5rocks.com/ja/tutorials/webcomponents/imports/&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 11 Feb 2015 05:52:00 +0900</pubDate>
        <link>ino-h.com/blog/2015/02/11/startup-html-imports.html</link>
        <guid isPermaLink="true">ino-h.com/blog/2015/02/11/startup-html-imports.html</guid>
        
        
        <category>blog</category>
        
      </item>
    
  </channel>
</rss>
